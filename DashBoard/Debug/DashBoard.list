
DashBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002be4  08002be4  00003be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c14  08002c14  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c14  08002c14  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c14  08002c14  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c14  08002c14  00003c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c18  08002c18  00003c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002c28  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002c28  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b26c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1f  00000000  00000000  0000f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00010dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c6  00000000  00000000  00011950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc4a  00000000  00000000  00012216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d00d  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6423  00000000  00000000  0003be6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000f22d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f5240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002bcc 	.word	0x08002bcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002bcc 	.word	0x08002bcc

08000218 <send_cmd>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_cmd(char cmd){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af02      	add	r7, sp, #8
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f023 030f 	bic.w	r3, r3, #15
 8000228:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	011b      	lsls	r3, r3, #4
 800022e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	f043 030c 	orr.w	r3, r3, #12
 8000236:	b2db      	uxtb	r3, r3
 8000238:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	f043 0308 	orr.w	r3, r3, #8
 8000240:	b2db      	uxtb	r3, r3
 8000242:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	f043 030c 	orr.w	r3, r3, #12
 800024a:	b2db      	uxtb	r3, r3
 800024c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800024e:	7bbb      	ldrb	r3, [r7, #14]
 8000250:	f043 0308 	orr.w	r3, r3, #8
 8000254:	b2db      	uxtb	r3, r3
 8000256:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, (uint8_t* )data_t,4,100);
 8000258:	f107 0208 	add.w	r2, r7, #8
 800025c:	2364      	movs	r3, #100	@ 0x64
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2304      	movs	r3, #4
 8000262:	213c      	movs	r1, #60	@ 0x3c
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <send_cmd+0x5c>)
 8000266:	f001 f921 	bl	80014ac <HAL_I2C_Master_Transmit>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	2000008c 	.word	0x2000008c

08000278 <send_data>:

void send_data(char data){
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af02      	add	r7, sp, #8
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f023 030f 	bic.w	r3, r3, #15
 8000288:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	f043 030d 	orr.w	r3, r3, #13
 8000296:	b2db      	uxtb	r3, r3
 8000298:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	f043 0309 	orr.w	r3, r3, #9
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002a4:	7bbb      	ldrb	r3, [r7, #14]
 80002a6:	f043 030d 	orr.w	r3, r3, #13
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002ae:	7bbb      	ldrb	r3, [r7, #14]
 80002b0:	f043 0309 	orr.w	r3, r3, #9
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, (uint8_t* )data_t,4,100);
 80002b8:	f107 0208 	add.w	r2, r7, #8
 80002bc:	2364      	movs	r3, #100	@ 0x64
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2304      	movs	r3, #4
 80002c2:	213c      	movs	r1, #60	@ 0x3c
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <send_data+0x5c>)
 80002c6:	f001 f8f1 	bl	80014ac <HAL_I2C_Master_Transmit>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000008c 	.word	0x2000008c

080002d8 <lcd_init>:

void lcd_init(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	send_cmd(0x2A); //function set (extended command set)
 80002dc:	202a      	movs	r0, #42	@ 0x2a
 80002de:	f7ff ff9b 	bl	8000218 <send_cmd>
	send_cmd(0x71); //function selection A
 80002e2:	2071      	movs	r0, #113	@ 0x71
 80002e4:	f7ff ff98 	bl	8000218 <send_cmd>
	send_data(0x00); // disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
 80002e8:	2000      	movs	r0, #0
 80002ea:	f7ff ffc5 	bl	8000278 <send_data>
	send_cmd(0x28); //function set (fundamental command set)
 80002ee:	2028      	movs	r0, #40	@ 0x28
 80002f0:	f7ff ff92 	bl	8000218 <send_cmd>
	// not turning display off means it doesn't blink on re-init, so is silent error.
//	send_cmd(0x08); //display off, cursor off, blink off
	send_cmd(0x2A); //function set (extended command set)
 80002f4:	202a      	movs	r0, #42	@ 0x2a
 80002f6:	f7ff ff8f 	bl	8000218 <send_cmd>
	send_cmd(0x79); //OLED command set enabled
 80002fa:	2079      	movs	r0, #121	@ 0x79
 80002fc:	f7ff ff8c 	bl	8000218 <send_cmd>
	send_cmd(0xD5); //set display clock divide ratio/oscillator frequency
 8000300:	20d5      	movs	r0, #213	@ 0xd5
 8000302:	f7ff ff89 	bl	8000218 <send_cmd>
	send_cmd(0x70); //set display clock divide ratio/oscillator frequency
 8000306:	2070      	movs	r0, #112	@ 0x70
 8000308:	f7ff ff86 	bl	8000218 <send_cmd>
	send_cmd(0x78); //OLED command set disabled
 800030c:	2078      	movs	r0, #120	@ 0x78
 800030e:	f7ff ff83 	bl	8000218 <send_cmd>
	send_cmd(0x09); //extended function set (4-lines)
 8000312:	2009      	movs	r0, #9
 8000314:	f7ff ff80 	bl	8000218 <send_cmd>
	send_cmd(0x06); //COM SEG direction
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff7d 	bl	8000218 <send_cmd>
	send_cmd(0x72); //function selection B
 800031e:	2072      	movs	r0, #114	@ 0x72
 8000320:	f7ff ff7a 	bl	8000218 <send_cmd>
	send_data(0x00); //ROM CGRAM selection
 8000324:	2000      	movs	r0, #0
 8000326:	f7ff ffa7 	bl	8000278 <send_data>
	send_cmd(0x2A); //function set (extended command set)
 800032a:	202a      	movs	r0, #42	@ 0x2a
 800032c:	f7ff ff74 	bl	8000218 <send_cmd>
	send_cmd(0x79); //OLED command set enabled
 8000330:	2079      	movs	r0, #121	@ 0x79
 8000332:	f7ff ff71 	bl	8000218 <send_cmd>
	send_cmd(0xDA); //set SEG pins hardware configuration
 8000336:	20da      	movs	r0, #218	@ 0xda
 8000338:	f7ff ff6e 	bl	8000218 <send_cmd>
	send_cmd(0x10); //set SEG pins hardware configuration
 800033c:	2010      	movs	r0, #16
 800033e:	f7ff ff6b 	bl	8000218 <send_cmd>
	send_cmd(0xDC); //function selection C
 8000342:	20dc      	movs	r0, #220	@ 0xdc
 8000344:	f7ff ff68 	bl	8000218 <send_cmd>
	send_cmd(0x00); //function selection C
 8000348:	2000      	movs	r0, #0
 800034a:	f7ff ff65 	bl	8000218 <send_cmd>
	send_cmd(0x81); //set contrast control
 800034e:	2081      	movs	r0, #129	@ 0x81
 8000350:	f7ff ff62 	bl	8000218 <send_cmd>
	send_cmd(0x7F); //set contrast control
 8000354:	207f      	movs	r0, #127	@ 0x7f
 8000356:	f7ff ff5f 	bl	8000218 <send_cmd>
	send_cmd(0xD9); //set phase length
 800035a:	20d9      	movs	r0, #217	@ 0xd9
 800035c:	f7ff ff5c 	bl	8000218 <send_cmd>
	send_cmd(0xF1); //set phase length
 8000360:	20f1      	movs	r0, #241	@ 0xf1
 8000362:	f7ff ff59 	bl	8000218 <send_cmd>
	send_cmd(0xDB); //set VCOMH deselect level
 8000366:	20db      	movs	r0, #219	@ 0xdb
 8000368:	f7ff ff56 	bl	8000218 <send_cmd>
	send_cmd(0x40); //set VCOMH deselect level
 800036c:	2040      	movs	r0, #64	@ 0x40
 800036e:	f7ff ff53 	bl	8000218 <send_cmd>
	send_cmd(0x78); //OLED command set disabled
 8000372:	2078      	movs	r0, #120	@ 0x78
 8000374:	f7ff ff50 	bl	8000218 <send_cmd>
	send_cmd(0x28); //function set (fundamental command set)
 8000378:	2028      	movs	r0, #40	@ 0x28
 800037a:	f7ff ff4d 	bl	8000218 <send_cmd>
	// don't clear display, w're writing the whole thing anyway
	send_cmd(0x01); //clear display
 800037e:	2001      	movs	r0, #1
 8000380:	f7ff ff4a 	bl	8000218 <send_cmd>
	send_cmd(0x80); //set DDRAM address to 0x00
 8000384:	2080      	movs	r0, #128	@ 0x80
 8000386:	f7ff ff47 	bl	8000218 <send_cmd>
	send_cmd(0x0C); //display ON
 800038a:	200c      	movs	r0, #12
 800038c:	f7ff ff44 	bl	8000218 <send_cmd>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <lcd_send_stringpos>:

int lcd_send_stringpos(int row, int col, int *str){
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b097      	sub	sp, #92	@ 0x5c
 8000398:	af02      	add	r7, sp, #8
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]

	uint8_t data_t[40];

	int row_offsets[] = { 0x00, 0x20, 0x40, 0x60 };//THIS WAS THE CHANGE FOR 4 LINES
 80003a0:	4b25      	ldr	r3, [pc, #148]	@ (8000438 <lcd_send_stringpos+0xa4>)
 80003a2:	f107 0414 	add.w	r4, r7, #20
 80003a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	data_t[0] = 0x80; // 0x80 continuation bit with cmd
 80003ac:	2380      	movs	r3, #128	@ 0x80
 80003ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	data_t[1] = (0x80 | (col + row_offsets[row])); // command acted.
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	3350      	adds	r3, #80	@ 0x50
 80003b8:	443b      	add	r3, r7
 80003ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	4413      	add	r3, r2
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	data_t[2] = 0x40; // 0x40, rest of send is data. data bit only set 0b01000000 // @ sign.
 80003d6:	2340      	movs	r3, #64	@ 0x40
 80003d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	int len = 3;
 80003dc:	2303      	movs	r3, #3
 80003de:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (*str){
 80003e0:	e00d      	b.n	80003fe <lcd_send_stringpos+0x6a>
		data_t[len] = *str++;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	1d1a      	adds	r2, r3, #4
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	b2d9      	uxtb	r1, r3
 80003ec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80003f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80003f2:	4413      	add	r3, r2
 80003f4:	460a      	mov	r2, r1
 80003f6:	701a      	strb	r2, [r3, #0]
		len++;
 80003f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80003fa:	3301      	adds	r3, #1
 80003fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (*str){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d1ed      	bne.n	80003e2 <lcd_send_stringpos+0x4e>
	} // loop till 0
	data_t[len] = 0;
 8000406:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800040a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800040c:	4413      	add	r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]

	if ( HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1,(uint8_t *) data_t, len,10) != HAL_OK ){ // blocking write to make sure it gets sent.
 8000412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000414:	b29b      	uxth	r3, r3
 8000416:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800041a:	210a      	movs	r1, #10
 800041c:	9100      	str	r1, [sp, #0]
 800041e:	2178      	movs	r1, #120	@ 0x78
 8000420:	4806      	ldr	r0, [pc, #24]	@ (800043c <lcd_send_stringpos+0xa8>)
 8000422:	f001 f843 	bl	80014ac <HAL_I2C_Master_Transmit>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <lcd_send_stringpos+0x9c>
		return 0;
 800042c:	2300      	movs	r3, #0
 800042e:	e7ff      	b.n	8000430 <lcd_send_stringpos+0x9c>
	}
}
 8000430:	4618      	mov	r0, r3
 8000432:	3754      	adds	r7, #84	@ 0x54
 8000434:	46bd      	mov	sp, r7
 8000436:	bd90      	pop	{r4, r7, pc}
 8000438:	08002be4 	.word	0x08002be4
 800043c:	2000008c 	.word	0x2000008c

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 faf7 	bl	8000a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f810 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f8d4 	bl	80005f8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000450:	f000 f84c 	bl	80004ec <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000454:	f000 f890 	bl	8000578 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000458:	f7ff ff3e 	bl	80002d8 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_send_stringpos(1,0,"Hello World!");
 800045c:	4a02      	ldr	r2, [pc, #8]	@ (8000468 <main+0x28>)
 800045e:	2100      	movs	r1, #0
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff97 	bl	8000394 <lcd_send_stringpos>
 8000466:	e7f9      	b.n	800045c <main+0x1c>
 8000468:	08002bf4 	.word	0x08002bf4

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b094      	sub	sp, #80	@ 0x50
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0318 	add.w	r3, r7, #24
 8000476:	2238      	movs	r2, #56	@ 0x38
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f002 fb7a 	bl	8002b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800048e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000492:	f001 fbd5 	bl	8001c40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800049e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a0:	2340      	movs	r3, #64	@ 0x40
 80004a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 fc7b 	bl	8001da8 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004b8:	f000 f958 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 ff79 	bl	80023cc <HAL_RCC_ClockConfig>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004e0:	f000 f944 	bl	800076c <Error_Handler>
  }
}
 80004e4:	bf00      	nop
 80004e6:	3750      	adds	r7, #80	@ 0x50
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 80004f2:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <MX_FDCAN1_Init+0x88>)
 80004f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000502:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000508:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800050a:	2200      	movs	r2, #0
 800050c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800050e:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000510:	2200      	movs	r2, #0
 8000512:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000514:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000516:	2200      	movs	r2, #0
 8000518:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800051a:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800051c:	2210      	movs	r2, #16
 800051e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000522:	2201      	movs	r2, #1
 8000524:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000526:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000528:	2202      	movs	r2, #2
 800052a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800052c:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800052e:	2202      	movs	r2, #2
 8000530:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000534:	2201      	movs	r2, #1
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800053a:	2201      	movs	r2, #1
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000540:	2201      	movs	r2, #1
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000546:	2201      	movs	r2, #1
 8000548:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800054c:	2200      	movs	r2, #0
 800054e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000552:	2200      	movs	r2, #0
 8000554:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000558:	2200      	movs	r2, #0
 800055a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800055e:	f000 fbbf 	bl	8000ce0 <HAL_FDCAN_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000568:	f000 f900 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40006400 	.word	0x40006400

08000578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <MX_I2C1_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	@ (80005f0 <MX_I2C1_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <MX_I2C1_Init+0x74>)
 8000584:	4a1b      	ldr	r2, [pc, #108]	@ (80005f4 <MX_I2C1_Init+0x7c>)
 8000586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <MX_I2C1_Init+0x74>)
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000594:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <MX_I2C1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b2:	480e      	ldr	r0, [pc, #56]	@ (80005ec <MX_I2C1_Init+0x74>)
 80005b4:	f000 fede 	bl	8001374 <HAL_I2C_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005be:	f000 f8d5 	bl	800076c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4809      	ldr	r0, [pc, #36]	@ (80005ec <MX_I2C1_Init+0x74>)
 80005c6:	f001 faa3 	bl	8001b10 <HAL_I2CEx_ConfigAnalogFilter>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d0:	f000 f8cc 	bl	800076c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d4:	2100      	movs	r1, #0
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_I2C1_Init+0x74>)
 80005d8:	f001 fae5 	bl	8001ba6 <HAL_I2CEx_ConfigDigitalFilter>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f000 f8c3 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	40005400 	.word	0x40005400
 80005f4:	00303d5b 	.word	0x00303d5b

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	@ 0x28
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b53      	ldr	r3, [pc, #332]	@ (800075c <MX_GPIO_Init+0x164>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a52      	ldr	r2, [pc, #328]	@ (800075c <MX_GPIO_Init+0x164>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b50      	ldr	r3, [pc, #320]	@ (800075c <MX_GPIO_Init+0x164>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b4d      	ldr	r3, [pc, #308]	@ (800075c <MX_GPIO_Init+0x164>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a4c      	ldr	r2, [pc, #304]	@ (800075c <MX_GPIO_Init+0x164>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b4a      	ldr	r3, [pc, #296]	@ (800075c <MX_GPIO_Init+0x164>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063e:	4b47      	ldr	r3, [pc, #284]	@ (800075c <MX_GPIO_Init+0x164>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a46      	ldr	r2, [pc, #280]	@ (800075c <MX_GPIO_Init+0x164>)
 8000644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b44      	ldr	r3, [pc, #272]	@ (800075c <MX_GPIO_Init+0x164>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b41      	ldr	r3, [pc, #260]	@ (800075c <MX_GPIO_Init+0x164>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a40      	ldr	r2, [pc, #256]	@ (800075c <MX_GPIO_Init+0x164>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b3e      	ldr	r3, [pc, #248]	@ (800075c <MX_GPIO_Init+0x164>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b3b      	ldr	r3, [pc, #236]	@ (800075c <MX_GPIO_Init+0x164>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a3a      	ldr	r2, [pc, #232]	@ (800075c <MX_GPIO_Init+0x164>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b38      	ldr	r3, [pc, #224]	@ (800075c <MX_GPIO_Init+0x164>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	4834      	ldr	r0, [pc, #208]	@ (8000760 <MX_GPIO_Init+0x168>)
 800068e:	f000 fe59 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(res_out_GPIO_Port, res_out_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f000 fe53 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, rot_3_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80006a4:	482f      	ldr	r0, [pc, #188]	@ (8000764 <MX_GPIO_Init+0x16c>)
 80006a6:	f000 fe4d 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4827      	ldr	r0, [pc, #156]	@ (8000760 <MX_GPIO_Init+0x168>)
 80006c4:	f000 fcbc 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_button_Pin */
  GPIO_InitStruct.Pin = reset_button_Pin;
 80006c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(reset_button_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4822      	ldr	r0, [pc, #136]	@ (8000768 <MX_GPIO_Init+0x170>)
 80006de:	f000 fcaf 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : rot_0_Pin rot_1_Pin joy_0_Pin rot_2_Pin
                           btn_0_Pin btn_1_Pin */
  GPIO_InitStruct.Pin = rot_0_Pin|rot_1_Pin|joy_0_Pin|rot_2_Pin
 80006e2:	23d7      	movs	r3, #215	@ 0xd7
 80006e4:	617b      	str	r3, [r7, #20]
                          |btn_0_Pin|btn_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f8:	f000 fca2 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : res_out_Pin */
  GPIO_InitStruct.Pin = res_out_Pin;
 80006fc:	2320      	movs	r3, #32
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(res_out_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f000 fc93 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : rot_3_Pin PB9 */
  GPIO_InitStruct.Pin = rot_3_Pin|GPIO_PIN_9;
 800071a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	480c      	ldr	r0, [pc, #48]	@ (8000764 <MX_GPIO_Init+0x16c>)
 8000734:	f000 fc84 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_3_Pin btn_2_Pin joy_4_Pin joy_3_Pin
                           joy_2_Pin joy_1_Pin */
  GPIO_InitStruct.Pin = btn_3_Pin|btn_2_Pin|joy_4_Pin|joy_3_Pin
 8000738:	f24c 0378 	movw	r3, #49272	@ 0xc078
 800073c:	617b      	str	r3, [r7, #20]
                          |joy_2_Pin|joy_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_GPIO_Init+0x16c>)
 800074e:	f000 fc77 	bl	8001040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	@ 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	48000800 	.word	0x48000800
 8000764:	48000400 	.word	0x48000400
 8000768:	48001800 	.word	0x48001800

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000782:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <HAL_MspInit+0x44>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6613      	str	r3, [r2, #96]	@ 0x60
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <HAL_MspInit+0x44>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_MspInit+0x44>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_MspInit+0x44>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ae:	f001 faeb 	bl	8001d88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09a      	sub	sp, #104	@ 0x68
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2244      	movs	r2, #68	@ 0x44
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f9c7 	bl	8002b74 <memset>
  if(hfdcan->Instance==FDCAN1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <HAL_FDCAN_MspInit+0xac>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d139      	bne.n	8000864 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80007f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007fa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4618      	mov	r0, r3
 8000802:	f001 ffc7 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800080c:	f7ff ffae 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_FDCAN_MspInit+0xb0>)
 8000812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000814:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <HAL_FDCAN_MspInit+0xb0>)
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081a:	6593      	str	r3, [r2, #88]	@ 0x58
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_FDCAN_MspInit+0xb0>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_FDCAN_MspInit+0xb0>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <HAL_FDCAN_MspInit+0xb0>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_FDCAN_MspInit+0xb0>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000840:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000852:	2309      	movs	r3, #9
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f000 fbee 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3768      	adds	r7, #104	@ 0x68
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40006400 	.word	0x40006400
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	2244      	movs	r2, #68	@ 0x44
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f002 f96d 	bl	8002b74 <memset>
  if(hi2c->Instance==I2C1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a2d      	ldr	r2, [pc, #180]	@ (8000954 <HAL_I2C_MspInit+0xe0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d153      	bne.n	800094c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 ff6f 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008bc:	f7ff ff56 	bl	800076c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c4:	4a24      	ldr	r2, [pc, #144]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f6:	2312      	movs	r3, #18
 80008f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000902:	2304      	movs	r3, #4
 8000904:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000910:	f000 fb96 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000918:	2312      	movs	r3, #18
 800091a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000924:	2304      	movs	r3, #4
 8000926:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800092c:	4619      	mov	r1, r3
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <HAL_I2C_MspInit+0xe8>)
 8000930:	f000 fb86 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 800093a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800093e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_I2C_MspInit+0xe4>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3770      	adds	r7, #112	@ 0x70
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40005400 	.word	0x40005400
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f891 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit  
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 f8b7 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fd13 	bl	8000440 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	08002c1c 	.word	0x08002c1c
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	200000e4 	.word	0x200000e4

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>

08000a36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f91b 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f80e 	bl	8000a68 <HAL_InitTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fe8e 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_InitTick+0x68>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d022      	beq.n	8000ac2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <HAL_InitTick+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f918 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10f      	bne.n	8000abc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d809      	bhi.n	8000ab6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aaa:	f000 f8f2 	bl	8000c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_InitTick+0x70>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e004      	b.n	8000ac6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e001      	b.n	8000ac6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_IncTick+0x20>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a03      	ldr	r2, [pc, #12]	@ (8000af8 <HAL_IncTick+0x1c>)
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	200000e0 	.word	0x200000e0
 8000afc:	20000008 	.word	0x20000008

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000e0 	.word	0x200000e0

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	@ 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f7ff ff8e 	bl	8000b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff47 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff5e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff90 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5f 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffb2 	bl	8000c38 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e147      	b.n	8000f82 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d106      	bne.n	8000d0c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fd5a 	bl	80007c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0210 	bic.w	r2, r2, #16
 8000d1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d1c:	f7ff fef0 	bl	8000b00 <HAL_GetTick>
 8000d20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d22:	e012      	b.n	8000d4a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d24:	f7ff feec 	bl	8000b00 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	d90b      	bls.n	8000d4a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e11b      	b.n	8000f82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d0e5      	beq.n	8000d24 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d68:	f7ff feca 	bl	8000b00 <HAL_GetTick>
 8000d6c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d6e:	e012      	b.n	8000d96 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d70:	f7ff fec6 	bl	8000b00 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	d90b      	bls.n	8000d96 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0f5      	b.n	8000f82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0e5      	beq.n	8000d70 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0202 	orr.w	r2, r2, #2
 8000db2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a74      	ldr	r2, [pc, #464]	@ (8000f8c <HAL_FDCAN_Init+0x2ac>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d103      	bne.n	8000dc6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000dbe:	4a74      	ldr	r2, [pc, #464]	@ (8000f90 <HAL_FDCAN_Init+0x2b0>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7c1b      	ldrb	r3, [r3, #16]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d108      	bne.n	8000de0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ddc:	619a      	str	r2, [r3, #24]
 8000dde:	e007      	b.n	8000df0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000dee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7c5b      	ldrb	r3, [r3, #17]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d108      	bne.n	8000e0a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	e007      	b.n	8000e1a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e18:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7c9b      	ldrb	r3, [r3, #18]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699a      	ldr	r2, [r3, #24]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e30:	619a      	str	r2, [r3, #24]
 8000e32:	e007      	b.n	8000e44 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	699a      	ldr	r2, [r3, #24]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e42:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000e68:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0210 	bic.w	r2, r2, #16
 8000e78:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	e02c      	b.n	8000eee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d028      	beq.n	8000eee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d01c      	beq.n	8000ede <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eb2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0210 	orr.w	r2, r2, #16
 8000ec2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d110      	bne.n	8000eee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	e007      	b.n	8000eee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	699a      	ldr	r2, [r3, #24]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0220 	orr.w	r2, r2, #32
 8000eec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000efe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f06:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f16:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f18:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f22:	d115      	bne.n	8000f50 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f3c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f44:	3b01      	subs	r3, #1
 8000f46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f814 	bl	8000f94 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40006400 	.word	0x40006400
 8000f90:	40006500 	.word	0x40006500

08000f94 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	@ (800103c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000f9e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fae:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb6:	041a      	lsls	r2, r3, #16
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fdc:	061a      	lsls	r2, r3, #24
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e005      	b.n	8001022 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3304      	adds	r3, #4
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	429a      	cmp	r2, r3
 800102c:	d3f3      	bcc.n	8001016 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	4000a400 	.word	0x4000a400

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800104e:	e15a      	b.n	8001306 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 814c 	beq.w	8001300 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	6939      	ldr	r1, [r7, #16]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80a6 	beq.w	8001300 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001324 <HAL_GPIO_Init+0x2e4>)
 80011b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <HAL_GPIO_Init+0x2e4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6613      	str	r3, [r2, #96]	@ 0x60
 80011c0:	4b58      	ldr	r3, [pc, #352]	@ (8001324 <HAL_GPIO_Init+0x2e4>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011cc:	4a56      	ldr	r2, [pc, #344]	@ (8001328 <HAL_GPIO_Init+0x2e8>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011f6:	d01f      	beq.n	8001238 <HAL_GPIO_Init+0x1f8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4c      	ldr	r2, [pc, #304]	@ (800132c <HAL_GPIO_Init+0x2ec>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d019      	beq.n	8001234 <HAL_GPIO_Init+0x1f4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <HAL_GPIO_Init+0x2f0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1f0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4a      	ldr	r2, [pc, #296]	@ (8001334 <HAL_GPIO_Init+0x2f4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1ec>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a49      	ldr	r2, [pc, #292]	@ (8001338 <HAL_GPIO_Init+0x2f8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a48      	ldr	r2, [pc, #288]	@ (800133c <HAL_GPIO_Init+0x2fc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1e4>
 8001220:	2305      	movs	r3, #5
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001224:	2306      	movs	r3, #6
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	@ (8001328 <HAL_GPIO_Init+0x2e8>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001258:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <HAL_GPIO_Init+0x300>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800127c:	4a30      	ldr	r2, [pc, #192]	@ (8001340 <HAL_GPIO_Init+0x300>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_GPIO_Init+0x300>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a6:	4a26      	ldr	r2, [pc, #152]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012ac:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4a11      	ldr	r2, [pc, #68]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae9d 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001360:	e002      	b.n	8001368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e08d      	b.n	80014a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fa6a 	bl	8000874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2224      	movs	r2, #36	@ 0x24
 80013a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e006      	b.n	80013fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d108      	bne.n	8001416 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	e007      	b.n	8001426 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69d9      	ldr	r1, [r3, #28]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2220      	movs	r2, #32
 800148e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	461a      	mov	r2, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	4613      	mov	r3, r2
 80014be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	f040 80fd 	bne.w	80016c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x30>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0f6      	b.n	80016ca <HAL_I2C_Master_Transmit+0x21e>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014e4:	f7ff fb0c 	bl	8000b00 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2319      	movs	r3, #25
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f914 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0e1      	b.n	80016ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2221      	movs	r2, #33	@ 0x21
 800150a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2210      	movs	r2, #16
 8001512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	2bff      	cmp	r3, #255	@ 0xff
 8001536:	d906      	bls.n	8001546 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	22ff      	movs	r2, #255	@ 0xff
 800153c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800153e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e007      	b.n	8001556 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001550:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001554:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155a:	2b00      	cmp	r3, #0
 800155c:	d024      	beq.n	80015a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	8979      	ldrh	r1, [r7, #10]
 800159a:	4b4e      	ldr	r3, [pc, #312]	@ (80016d4 <HAL_I2C_Master_Transmit+0x228>)
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fa83 	bl	8001aac <I2C_TransferConfig>
 80015a6:	e066      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	8979      	ldrh	r1, [r7, #10]
 80015b0:	4b48      	ldr	r3, [pc, #288]	@ (80016d4 <HAL_I2C_Master_Transmit+0x228>)
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fa78 	bl	8001aac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015bc:	e05b      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	6a39      	ldr	r1, [r7, #32]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f907 	bl	80017d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07b      	b.n	80016ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d034      	beq.n	8001676 <HAL_I2C_Master_Transmit+0x1ca>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001610:	2b00      	cmp	r3, #0
 8001612:	d130      	bne.n	8001676 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	2200      	movs	r2, #0
 800161c:	2180      	movs	r1, #128	@ 0x80
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f880 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e04d      	b.n	80016ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001632:	b29b      	uxth	r3, r3
 8001634:	2bff      	cmp	r3, #255	@ 0xff
 8001636:	d90e      	bls.n	8001656 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	22ff      	movs	r2, #255	@ 0xff
 800163c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001642:	b2da      	uxtb	r2, r3
 8001644:	8979      	ldrh	r1, [r7, #10]
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 fa2c 	bl	8001aac <I2C_TransferConfig>
 8001654:	e00f      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001664:	b2da      	uxtb	r2, r3
 8001666:	8979      	ldrh	r1, [r7, #10]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 fa1b 	bl	8001aac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d19e      	bne.n	80015be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	6a39      	ldr	r1, [r7, #32]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f8ed 	bl	8001864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e01a      	b.n	80016ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2220      	movs	r2, #32
 800169a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6859      	ldr	r1, [r3, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_I2C_Master_Transmit+0x22c>)
 80016a8:	400b      	ands	r3, r1
 80016aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e000      	b.n	80016ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80016c8:	2302      	movs	r3, #2
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	80002000 	.word	0x80002000
 80016d8:	fe00e800 	.word	0xfe00e800

080016dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d103      	bne.n	80016fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d007      	beq.n	8001718 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	619a      	str	r2, [r3, #24]
  }
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001734:	e03b      	b.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f8d6 	bl	80018ec <I2C_IsErrorOccurred>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e041      	b.n	80017ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d02d      	beq.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001752:	f7ff f9d5 	bl	8000b00 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d302      	bcc.n	8001768 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d122      	bne.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	4013      	ands	r3, r2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	429a      	cmp	r2, r3
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	429a      	cmp	r2, r3
 8001784:	d113      	bne.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f043 0220 	orr.w	r2, r3, #32
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699a      	ldr	r2, [r3, #24]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4013      	ands	r3, r2
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d0b4      	beq.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017e2:	e033      	b.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f87f 	bl	80018ec <I2C_IsErrorOccurred>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e031      	b.n	800185c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fe:	d025      	beq.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001800:	f7ff f97e 	bl	8000b00 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d302      	bcc.n	8001816 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11a      	bne.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b02      	cmp	r3, #2
 8001822:	d013      	beq.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e007      	b.n	800185c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d1c4      	bne.n	80017e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001870:	e02f      	b.n	80018d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f838 	bl	80018ec <I2C_IsErrorOccurred>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e02d      	b.n	80018e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001886:	f7ff f93b 	bl	8000b00 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	429a      	cmp	r2, r3
 8001894:	d302      	bcc.n	800189c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11a      	bne.n	80018d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d013      	beq.n	80018d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f043 0220 	orr.w	r2, r3, #32
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2220      	movs	r2, #32
 80018ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e007      	b.n	80018e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d1c8      	bne.n	8001872 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	d068      	beq.n	80019ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2210      	movs	r2, #16
 800191e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001920:	e049      	b.n	80019b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d045      	beq.n	80019b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800192a:	f7ff f8e9 	bl	8000b00 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	429a      	cmp	r2, r3
 8001938:	d302      	bcc.n	8001940 <I2C_IsErrorOccurred+0x54>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d13a      	bne.n	80019b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001952:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800195e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001962:	d121      	bne.n	80019a8 <I2C_IsErrorOccurred+0xbc>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800196a:	d01d      	beq.n	80019a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d01a      	beq.n	80019a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001980:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001982:	f7ff f8bd 	bl	8000b00 <HAL_GetTick>
 8001986:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001988:	e00e      	b.n	80019a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800198a:	f7ff f8b9 	bl	8000b00 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b19      	cmp	r3, #25
 8001996:	d907      	bls.n	80019a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f043 0320 	orr.w	r3, r3, #32
 800199e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80019a6:	e006      	b.n	80019b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d1e9      	bne.n	800198a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d003      	beq.n	80019cc <I2C_IsErrorOccurred+0xe0>
 80019c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0aa      	beq.n	8001922 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2220      	movs	r2, #32
 80019da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00b      	beq.n	8001a58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01c      	beq.n	8001a9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fe3b 	bl	80016dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <I2C_IsErrorOccurred+0x1bc>)
 8001a72:	400b      	ands	r3, r1
 8001a74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3728      	adds	r7, #40	@ 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	fe00e800 	.word	0xfe00e800

08001aac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	4613      	mov	r3, r2
 8001abc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ac4:	7a7b      	ldrb	r3, [r7, #9]
 8001ac6:	041b      	lsls	r3, r3, #16
 8001ac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001acc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ada:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	0d5b      	lsrs	r3, r3, #21
 8001ae6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <I2C_TransferConfig+0x60>)
 8001aec:	430b      	orrs	r3, r1
 8001aee:	43db      	mvns	r3, r3
 8001af0:	ea02 0103 	and.w	r1, r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	03ff63ff 	.word	0x03ff63ff

08001b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d138      	bne.n	8001b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e032      	b.n	8001b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2224      	movs	r2, #36	@ 0x24
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b98:	2302      	movs	r3, #2
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d139      	bne.n	8001c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e033      	b.n	8001c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2224      	movs	r2, #36	@ 0x24
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d141      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5a:	d131      	bne.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c62:	4a46      	ldr	r2, [pc, #280]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6c:	4b43      	ldr	r3, [pc, #268]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c74:	4a41      	ldr	r2, [pc, #260]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c7c:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2232      	movs	r2, #50	@ 0x32
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a3f      	ldr	r2, [pc, #252]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c92:	e002      	b.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9a:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca6:	d102      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f2      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cae:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d158      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e057      	b.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cd0:	e04d      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cd8:	d141      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cda:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce6:	d131      	bne.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d00:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2232      	movs	r2, #50	@ 0x32
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1e:	e002      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d32:	d102      	bne.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f2      	bne.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d46:	d112      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e011      	b.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d5c:	e007      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d5e:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	20000000 	.word	0x20000000
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d96:	6093      	str	r3, [r2, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40007000 	.word	0x40007000

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e2fe      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d075      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b97      	ldr	r3, [pc, #604]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd0:	4b94      	ldr	r3, [pc, #592]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3e>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_OscConfig+0x44>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	4b8d      	ldr	r3, [pc, #564]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d05b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x108>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d157      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e2d9      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCC_OscConfig+0x74>
 8001e0e:	4b85      	ldr	r3, [pc, #532]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a84      	ldr	r2, [pc, #528]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e01d      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b7f      	ldr	r3, [pc, #508]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b7c      	ldr	r3, [pc, #496]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7b      	ldr	r2, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e40:	4b78      	ldr	r3, [pc, #480]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a77      	ldr	r2, [pc, #476]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b75      	ldr	r3, [pc, #468]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a74      	ldr	r2, [pc, #464]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fe4e 	bl	8000b00 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7fe fe4a 	bl	8000b00 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	@ 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e29e      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0xc0>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe fe3a 	bl	8000b00 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7fe fe36 	bl	8000b00 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	@ 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e28a      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ea2:	4b60      	ldr	r3, [pc, #384]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0xe8>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b59      	ldr	r3, [pc, #356]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec8:	4b56      	ldr	r3, [pc, #344]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_OscConfig+0x136>
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x13c>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d11f      	bne.n	8001f24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x154>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e25d      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	4946      	ldr	r1, [pc, #280]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f10:	4b45      	ldr	r3, [pc, #276]	@ (8002028 <HAL_RCC_OscConfig+0x280>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fda7 	bl	8000a68 <HAL_InitTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d043      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e249      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a3c      	ldr	r2, [pc, #240]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe fde2 	bl	8000b00 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7fe fdde 	bl	8000b00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e232      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f52:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	061b      	lsls	r3, r3, #24
 8001f6c:	492d      	ldr	r1, [pc, #180]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
 8001f72:	e01a      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2a      	ldr	r2, [pc, #168]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7fe fdbe 	bl	8000b00 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7fe fdba 	bl	8000b00 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e20e      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9a:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1e0>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d041      	beq.n	800203a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc4:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7fe fd97 	bl	8000b00 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7fe fd93 	bl	8000b00 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1e7      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ef      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x22e>
 8001ff6:	e020      	b.n	800203a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ffe:	4a09      	ldr	r2, [pc, #36]	@ (8002024 <HAL_RCC_OscConfig+0x27c>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7fe fd7a 	bl	8000b00 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800200e:	e00d      	b.n	800202c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe fd76 	bl	8000b00 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d906      	bls.n	800202c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1ca      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202c:	4b8c      	ldr	r3, [pc, #560]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ea      	bne.n	8002010 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80a6 	beq.w	8002194 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800204c:	4b84      	ldr	r3, [pc, #528]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x2b4>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x2b6>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b7f      	ldr	r3, [pc, #508]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	4a7e      	ldr	r2, [pc, #504]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	@ 0x58
 800206e:	4b7c      	ldr	r3, [pc, #496]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800207a:	2301      	movs	r3, #1
 800207c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	4b79      	ldr	r3, [pc, #484]	@ (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208a:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <HAL_RCC_OscConfig+0x4bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a75      	ldr	r2, [pc, #468]	@ (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7fe fd33 	bl	8000b00 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7fe fd2f 	bl	8000b00 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e183      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_RCC_OscConfig+0x32e>
 80020c4:	4b66      	ldr	r3, [pc, #408]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	4a65      	ldr	r2, [pc, #404]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020d4:	e024      	b.n	8002120 <HAL_RCC_OscConfig+0x378>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d110      	bne.n	8002100 <HAL_RCC_OscConfig+0x358>
 80020de:	4b60      	ldr	r3, [pc, #384]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020fe:	e00f      	b.n	8002120 <HAL_RCC_OscConfig+0x378>
 8002100:	4b57      	ldr	r3, [pc, #348]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	4a56      	ldr	r2, [pc, #344]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002110:	4b53      	ldr	r3, [pc, #332]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d016      	beq.n	8002156 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fcea 	bl	8000b00 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fce6 	bl	8000b00 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e138      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b46      	ldr	r3, [pc, #280]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ed      	beq.n	8002130 <HAL_RCC_OscConfig+0x388>
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe fcd3 	bl	8000b00 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fccf 	bl	8000b00 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e121      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002174:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ed      	bne.n	800215e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002182:	7ffb      	ldrb	r3, [r7, #31]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d03c      	beq.n	800221a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7fe fca2 	bl	8000b00 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c0:	f7fe fc9e 	bl	8000b00 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0f2      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021d2:	4b23      	ldr	r3, [pc, #140]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ef      	beq.n	80021c0 <HAL_RCC_OscConfig+0x418>
 80021e0:	e01b      	b.n	800221a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7fe fc85 	bl	8000b00 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fa:	f7fe fc81 	bl	8000b00 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0d5      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800220c:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ef      	bne.n	80021fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80c9 	beq.w	80023b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002224:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b0c      	cmp	r3, #12
 800222e:	f000 8083 	beq.w	8002338 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d15e      	bne.n	80022f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <HAL_RCC_OscConfig+0x4b8>)
 8002240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fc5b 	bl	8000b00 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e00c      	b.n	8002268 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe fc57 	bl	8000b00 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d905      	bls.n	8002268 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0ab      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
 8002260:	40021000 	.word	0x40021000
 8002264:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	4b55      	ldr	r3, [pc, #340]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ec      	bne.n	800224e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002274:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4b52      	ldr	r3, [pc, #328]	@ (80023c4 <HAL_RCC_OscConfig+0x61c>)
 800227a:	4013      	ands	r3, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6a11      	ldr	r1, [r2, #32]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002284:	3a01      	subs	r2, #1
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800228e:	0212      	lsls	r2, r2, #8
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002296:	0852      	lsrs	r2, r2, #1
 8002298:	3a01      	subs	r2, #1
 800229a:	0552      	lsls	r2, r2, #21
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022a2:	0852      	lsrs	r2, r2, #1
 80022a4:	3a01      	subs	r2, #1
 80022a6:	0652      	lsls	r2, r2, #25
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022ae:	06d2      	lsls	r2, r2, #27
 80022b0:	430a      	orrs	r2, r1
 80022b2:	4943      	ldr	r1, [pc, #268]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a40      	ldr	r2, [pc, #256]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c4:	4b3e      	ldr	r3, [pc, #248]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a3d      	ldr	r2, [pc, #244]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fc16 	bl	8000b00 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fc12 	bl	8000b00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e066      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b35      	ldr	r3, [pc, #212]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x530>
 80022f6:	e05e      	b.n	80023b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f8:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 80022fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fbfc 	bl	8000b00 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fbf8 	bl	8000b00 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04c      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231e:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800232a:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4924      	ldr	r1, [pc, #144]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_OscConfig+0x620>)
 8002332:	4013      	ands	r3, r2
 8002334:	60cb      	str	r3, [r1, #12]
 8002336:	e03e      	b.n	80023b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e039      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002344:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_RCC_OscConfig+0x618>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d12c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d123      	bne.n	80023b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d11b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d113      	bne.n	80023b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	3b01      	subs	r3, #1
 8002398:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	3b01      	subs	r3, #1
 80023ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	019f800c 	.word	0x019f800c
 80023c8:	feeefffc 	.word	0xfeeefffc

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e11e      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b91      	ldr	r3, [pc, #580]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b8e      	ldr	r3, [pc, #568]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 020f 	bic.w	r2, r3, #15
 80023fa:	498c      	ldr	r1, [pc, #560]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b8a      	ldr	r3, [pc, #552]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e106      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d073      	beq.n	8002508 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d129      	bne.n	800247c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002428:	4b81      	ldr	r3, [pc, #516]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0f4      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002438:	f000 f966 	bl	8002708 <RCC_GetSysClockFreqFromPLLSource>
 800243c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4a7c      	ldr	r2, [pc, #496]	@ (8002634 <HAL_RCC_ClockConfig+0x268>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d93f      	bls.n	80024c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002446:	4b7a      	ldr	r3, [pc, #488]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800245a:	2b00      	cmp	r3, #0
 800245c:	d033      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	d12f      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002466:	4b72      	ldr	r3, [pc, #456]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800246e:	4a70      	ldr	r2, [pc, #448]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002474:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e024      	b.n	80024c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d107      	bne.n	8002494 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002484:	4b6a      	ldr	r3, [pc, #424]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0c6      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002494:	4b66      	ldr	r3, [pc, #408]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0be      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024a4:	f000 f8ce 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4a61      	ldr	r2, [pc, #388]	@ (8002634 <HAL_RCC_ClockConfig+0x268>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d909      	bls.n	80024c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4957      	ldr	r1, [pc, #348]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe fb12 	bl	8000b00 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fb0e 	bl	8000b00 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e095      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800252a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002538:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002540:	4a3b      	ldr	r2, [pc, #236]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002542:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002546:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4936      	ldr	r1, [pc, #216]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
 800255a:	e008      	b.n	800256e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b80      	cmp	r3, #128	@ 0x80
 8002560:	d105      	bne.n	800256e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002562:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a32      	ldr	r2, [pc, #200]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002568:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800256c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256e:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d21d      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257c:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 020f 	bic.w	r2, r3, #15
 8002584:	4929      	ldr	r1, [pc, #164]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800258c:	f7fe fab8 	bl	8000b00 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fab4 	bl	8000b00 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e03b      	b.n	8002622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1ed      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4917      	ldr	r1, [pc, #92]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490f      	ldr	r1, [pc, #60]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f6:	f000 f825 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_RCC_ClockConfig+0x264>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490c      	ldr	r1, [pc, #48]	@ (8002638 <HAL_RCC_ClockConfig+0x26c>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_RCC_ClockConfig+0x270>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_RCC_ClockConfig+0x274>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fa24 	bl	8000a68 <HAL_InitTick>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	04c4b400 	.word	0x04c4b400
 8002638:	08002c04 	.word	0x08002c04
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800264a:	4b2c      	ldr	r3, [pc, #176]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d102      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002656:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e047      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d102      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002668:	4b26      	ldr	r3, [pc, #152]	@ (8002704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e03e      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800266e:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d136      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800267a:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002684:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3301      	adds	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002698:	4a1a      	ldr	r2, [pc, #104]	@ (8002704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	4a16      	ldr	r2, [pc, #88]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a2:	68d2      	ldr	r2, [r2, #12]
 80026a4:	0a12      	lsrs	r2, r2, #8
 80026a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
      break;
 80026b0:	e00c      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b2:	4a13      	ldr	r2, [pc, #76]	@ (8002700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4a10      	ldr	r2, [pc, #64]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	0a12      	lsrs	r2, r2, #8
 80026c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
      break;
 80026ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0e5b      	lsrs	r3, r3, #25
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e001      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026ec:	693b      	ldr	r3, [r7, #16]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	00f42400 	.word	0x00f42400
 8002704:	007a1200 	.word	0x007a1200

08002708 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800270e:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3301      	adds	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d10c      	bne.n	8002746 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	4a14      	ldr	r2, [pc, #80]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002736:	68d2      	ldr	r2, [r2, #12]
 8002738:	0a12      	lsrs	r2, r2, #8
 800273a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	617b      	str	r3, [r7, #20]
    break;
 8002744:	e00c      	b.n	8002760 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4a0e      	ldr	r2, [pc, #56]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	0a12      	lsrs	r2, r2, #8
 8002754:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    break;
 800275e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0e5b      	lsrs	r3, r3, #25
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800277a:	687b      	ldr	r3, [r7, #4]
}
 800277c:	4618      	mov	r0, r3
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40021000 	.word	0x40021000
 800278c:	007a1200 	.word	0x007a1200
 8002790:	00f42400 	.word	0x00f42400

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800279c:	2300      	movs	r3, #0
 800279e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027a0:	2300      	movs	r3, #0
 80027a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8098 	beq.w	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10d      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	4a3f      	ldr	r2, [pc, #252]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027da:	2301      	movs	r3, #1
 80027dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027de:	4b3a      	ldr	r3, [pc, #232]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a39      	ldr	r2, [pc, #228]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ea:	f7fe f989 	bl	8000b00 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f0:	e009      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7fe f985 	bl	8000b00 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d902      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	74fb      	strb	r3, [r7, #19]
        break;
 8002804:	e005      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002806:	4b30      	ldr	r3, [pc, #192]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ef      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d159      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002818:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002822:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01e      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d019      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002834:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800283e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002840:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002850:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002856:	4a1b      	ldr	r2, [pc, #108]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002860:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe f945 	bl	8000b00 <HAL_GetTick>
 8002876:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	e00b      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe f941 	bl	8000b00 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d902      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	74fb      	strb	r3, [r7, #19]
            break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ec      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4903      	ldr	r1, [pc, #12]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	74bb      	strb	r3, [r7, #18]
 80028c2:	e005      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d0:	7c7b      	ldrb	r3, [r7, #17]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	4aa5      	ldr	r2, [pc, #660]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f4:	f023 0203 	bic.w	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	499c      	ldr	r1, [pc, #624]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002910:	4b97      	ldr	r3, [pc, #604]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f023 020c 	bic.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4994      	ldr	r1, [pc, #592]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002932:	4b8f      	ldr	r3, [pc, #572]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002938:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	498b      	ldr	r1, [pc, #556]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002954:	4b86      	ldr	r3, [pc, #536]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4983      	ldr	r1, [pc, #524]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002976:	4b7e      	ldr	r3, [pc, #504]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	497a      	ldr	r1, [pc, #488]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002998:	4b75      	ldr	r3, [pc, #468]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	4972      	ldr	r1, [pc, #456]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4969      	ldr	r1, [pc, #420]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029dc:	4b64      	ldr	r3, [pc, #400]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4961      	ldr	r1, [pc, #388]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	4958      	ldr	r1, [pc, #352]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a20:	4b53      	ldr	r3, [pc, #332]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	4950      	ldr	r1, [pc, #320]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a40:	4b4b      	ldr	r3, [pc, #300]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a4a      	ldr	r2, [pc, #296]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a58:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	4942      	ldr	r1, [pc, #264]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a76:	d105      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a78:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a90:	4b37      	ldr	r3, [pc, #220]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4934      	ldr	r1, [pc, #208]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aae:	d105      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac8:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad6:	4926      	ldr	r1, [pc, #152]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a20      	ldr	r2, [pc, #128]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b00:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	4918      	ldr	r1, [pc, #96]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b38:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	490a      	ldr	r1, [pc, #40]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <memset>:
 8002b74:	4402      	add	r2, r0
 8002b76:	4603      	mov	r3, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <memset+0xa>
 8002b7c:	4770      	bx	lr
 8002b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b82:	e7f9      	b.n	8002b78 <memset+0x4>

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	4d0d      	ldr	r5, [pc, #52]	@ (8002bbc <__libc_init_array+0x38>)
 8002b88:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc0 <__libc_init_array+0x3c>)
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	2600      	movs	r6, #0
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	4d0b      	ldr	r5, [pc, #44]	@ (8002bc4 <__libc_init_array+0x40>)
 8002b96:	4c0c      	ldr	r4, [pc, #48]	@ (8002bc8 <__libc_init_array+0x44>)
 8002b98:	f000 f818 	bl	8002bcc <_init>
 8002b9c:	1b64      	subs	r4, r4, r5
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	08002c14 	.word	0x08002c14
 8002bc0:	08002c14 	.word	0x08002c14
 8002bc4:	08002c14 	.word	0x08002c14
 8002bc8:	08002c18 	.word	0x08002c18

08002bcc <_init>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr

08002bd8 <_fini>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	bf00      	nop
 8002bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bde:	bc08      	pop	{r3}
 8002be0:	469e      	mov	lr, r3
 8002be2:	4770      	bx	lr
